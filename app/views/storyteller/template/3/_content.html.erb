  <!-- ****************************************************
      *  if device is portable we are adding ios class to html tag
      *  so new classes with .ios .someclass path are used instead of basic ones
      ********************************************************* -->
      <script>
        var isMobile = function() {
          return /iPad|iPod|iPhone|Android/.test(navigator.userAgent) || document.location.hash == "#ipad";
        }

        var isPhone = function() {
          return isMobile() && window.innerWidth < 768;
        }
        if (isMobile()) {

          document.documentElement.className = document.documentElement.className + " ios";
        }  </script>


      <!--[if lte IE 8]><style type="text/css">
      .video-container video,
      .video-container img
      {
        position: static;
      }
      </style><![endif]-->


      <!-- ****************************************************
      *  array of functions added throught page which should be called at the end of page parsing with "await"
      *  function which is called at the bottom of the page
      ********************************************************* -->
      <script>

        (function() {
          var defers = [];
          defer = function(f) { defers.push(f); };
          await = function() { defers.forEach(function(f,s) { f();}); };

        })();</script>


      <!-- ****************************************************
      *  collecting navigation sections and it's markers
      *  binding click events on anchors and navigation section on resize and scroll
      ********************************************************* -->
      <script>

          defer(function() {
              var anchor = d3.selectAll(".navigation-section").on("click", clicked),
                  marker = d3.selectAll(".navigation-marker"),
                  markerOffsets;

              d3.select(".navigation-headline").on("click", clicked);

              d3.select(window)
                  .on("resize.navigation", resized)
                  .on("load.navigation", resized)
                  .on("scroll.navigation", scrolled);

              resized();

              function resized() {
                markerOffsets = marker.datum(function(d, i) { return i ? this.offsetTop : 0; }).data();
                scrolled();
              }

              function scrolled() {
                var j = Math.max(0, Math.min(markerOffsets.length - 1, d3.bisectLeft(markerOffsets, pageYOffset + 80) - 1));
                anchor.classed("navigation-section--active", function(d, i) { return i === j; });
              }

              function clicked(d, i) {
               // console.log(d); console.log(i);
                d3.event.preventDefault();
                d3.transition().duration(750).tween("scroll", function() {
                  var offset = d3.interpolateNumber(pageYOffset, markerOffsets[i]);
                  return function(t) { scrollTo(0, offset(t)); };
                });
              }

          });</script>

     <% alignment = { "left" => -1, "center" => 0, "right" => 1 }%>
    <div class="main">
      <div class="article">
        <% columnSectionCount = 0 %>
         <% @story.sections.select{|t| t.ok? }.sort_by{|p| p.position}.each_with_index do |section,s_i| %>
          <%  dataAudio = ''
              if section.asset_exists?
                dataAudio = "data-audio='#{File.basename(section.asset.asset_file_name_formatted,'.mp3')}'".html_safe
              end
           %>
              <% if section.content? %>
              <div class="section column" <%= dataAudio.html_safe %>>
                <% if section.has_marker? %>
                   <a class="navigation-marker" id="<%= s_i + 1 %>"></a>
                <% end %>
                <% if columnSectionCount == 0 %>
                  <div class='headline'><%= @story.title.downcase %></div>
                  <div class="byline byline--first" style="margin-bottom:24px;">
                    <span class="caption"><%= t('storyteller.byline') %></span><span class="author">&nbsp;<%= @story.author %></span><%= "<span class='caption'>,</span>&nbsp<span class='caption'>#{t('storyteller.byline_media')}</span><span class='author'>#{@story.media_author}</span>".html_safe if @story.media_author.present? %>
                  </div>
                <% end %>
                <%= "<div class='column-caption'>#{section.content.caption}</div>".html_safe  if section.content.caption.present? %>
                <%= "<div class='column-sub-caption'>#{section.content.sub_caption}</div>".html_safe  if section.content.sub_caption.present? %>
                <%= section.content.content.html_safe %>
                <% if section.content.content.html_safe.lines.count == 1 %>
                  <p>&nbsp;</p>
                <% end %>
              </div>
              <% columnSectionCount+=1 %>
            <% elsif section.media? %>
              <div class="section video-sequence" <%= dataAudio.html_safe %>>
                <% if section.has_marker? %>
                   <a class="navigation-marker" id="<%= s_i + 1 %>"></a>
                <% end %>
                <% section.media.each_with_index do |m,m_i| %>
                  <% dataVideo = '' %>
                  <% if m.media_type == Medium::TYPE[:video] && m.is_processed? %>
                    <% dataVideo = "data-video='#{File.basename(m.video.asset_file_name_formatted,'.*')}'".html_safe %>
                  <% end %>
                  <div class="video"  <%= dataVideo.html_safe %>  <%= m.video_loop ? "data-videoloop" : "" %>>
                    <div class="video-container">
                      <% if m.media_type == Medium::TYPE[:image] %>
                          <% if !@export %>
                            <img src="<%= m.image.asset.url(:fullscreen) %>">
                          <% else %>
                            <img src="media/images/fullscreen/<%= m.image.asset_file_name_formatted %>">
                          <% end %>
                      <% elsif m.media_type == Medium::TYPE[:video] && !m.is_processed?  %>
                          <% if !@export %>
                            <%= image_tag "png/video_being_processed_#{I18n.locale}.png" %>
                          <% else %>
                            <img src="assets/png/video_being_processed_#{I18n.locale}.png">
                          <% end %>
                      <% elsif m.media_type == Medium::TYPE[:video] && m.is_processed?  %>
                          <% if !@export %>
                            <!--[if lte IE 8]><img src="<%= m.image.asset.url(:fullscreen) %>"><![endif]-->
                          <% else %>
                            <!--[if lte IE 8]><img src="media/images/fullscreen/<%= m.image.asset_file_name_formatted %>"><![endif]-->
                          <% end %>
                        <% end %>
                        <% if m.source.present? %>
                           <div class="video-source"><%= m.source %></div>
                        <% end %>
                      </div>
                      <% caption_class = alignment.key(m.caption_align) %>
                      <% if m.caption.present? %>
                        <% if m.caption.length < 160 %>
                            <% caption_class = alignment.key(m.caption_align) %>
                        <% else %>
                         <% caption_class = 'long' %>
                        <% end %>
                      <% end %>

                        <% if s_i == 0 && m_i == 0 %>
                          <% caption_class = 'head' %>
                        <% end %>

                          <% if caption_class == 'head'  %>
                            <div class="video-caption video-caption--<%= caption_class %>">
                                <div class="video-headline headline">
                                <%  words = @story.title.split(' ') %>
                                <span class="headline-line1"><%=  words[0].downcase %></span><br/><span class="headline-line2"><%=  words[1..words.length-1].join(' ').downcase %></span></div>
                                <% if m.caption.present? %>
                                <div class="video-summary"> <%= m.caption %> </div>
                                <% end %>
                                <div class="scroll-prompt">
                                      <svg  x="0px" y="0px" width="18.03px" height="18.042px" viewBox="7.516 6.5 18.03 18.042" enable-background="new 7.516 6.5 18.03 18.042"
                                         xml:space="preserve">
                                        <polygon points="16.531,22.763 8.52,14.963 7.695,15.766 16.531,24.367 25.367,15.766 24.544,14.963 "/>
                                        <polygon points="25.367,7.477 24.544,6.674 16.531,14.475 8.52,6.674 7.695,7.477 16.531,16.079 "/>
                                      </svg>
                                </div>
                              </div>
                          <% else %>
                            <% if m.caption.present? %>
                              <div class="video-caption video-caption--<%= caption_class %>">
                                <%= m.caption  %>
                              </div>
                            <% end %>
                          <% end %>

                  </div>
                <% end %>
              </div>

              <% elsif section.slideshow? %>
              <div class="section slideshow">
                 <% if section.has_marker? %>
                       <a class="navigation-marker" id="<%= s_i + 1 %>"></a>
                    <% end %>
                <% if s_i == 0 %>
                  <div class='slideshow-headline'><%= @story.title %></div>
                <% end %>
                <div class="slideshow-wrapper">
                      <% if section.slideshow.caption.present? %>
                        <h3><%= section.slideshow.caption %></h3>
                      <% else %>
                        <h3>&nbsp;</h3>
                      <% end %>

                  <!--[if lte IE 8]><img src="<%= section.slideshow.assets[0].asset.url(:medium) %>" style="width:100%;"><![endif]-->
                  <div class="slideshow-captions">
                      <% section.slideshow.assets.each_with_index do |t,t_i| %>
                          <div class="slideshow-caption" data-slug="<%= t.asset_file_name_formatted %>">
                            <%= t.caption.html_safe %>
                            <% if t.source.present? %>
                              <div class="source"><%= "#{t('storyteller.source')}" %> <%= auto_link(t.source) %></div>
                            <% end %>
                          </div>
                    <% end %>
                  </div>
                </div>
              </div>
            <% end %>
         <% end %>



      </div>
    </div>

    <!-- #modalAbout -->
        <div class="section footer-section">
            <div class="left">
              <div><a href="https://www.jumpstart.ge" target="_blank" title="<%= t("app.common.js_link_title") %>" >
                <img src='<%= (@export ? "" : "/") + "assets/svg/js_w.svg"%>' class="footer-logo"/></a>
              </div>
            </div>
            <div class="right">
              <a href="https://www.facebook.com/sharer/sharer.php" onclick="javascript:window.open(this.href,
                    '', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;" class="link"> <img src='<%= (@export ? "" : "/") + "assets/svg/facebook_w.svg"%>' /></a>
              <a href='https://twitter.com/share?text=<%= "#{@story.title}" %>' onclick="javascript:window.open(this.href,
                                  '', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src='<%= (@export ? "" : "/") + "assets/svg/twitter_w.svg"%>' /></a>
              <a href="https://plus.google.com/share?url=<%= current_url %>" onclick="javascript:window.open(this.href,
              '', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=600,width=600');return false;"><img src='<%= (@export ? "" : "/") + "assets/svg/google+_w.svg"%>' alt="Share on Google+" /></a>
            </div>
          </div>
        </div>
        <div id="modalos-donate" style="display:none;" class="donate-window">
          <div class="want_donate">
            <a href="https://chca.org.ge/" style="float:left;" target="_blank"><img src='<%= (@export ? "" : "/template/#{@template}/") + "assets/png/chca.png"%>'></a>
            <p>If you would like to support these children, please donate to:</p>
            <p>TBC Bank Accunt: GE09TB0328336080101001</p>
            <p>Recipient Name: Charity Humanitarian Centre Abkhazeti</p>
            <p>And in the summary/description field of the transfer form, please enter: Kids from Shavshvebi </p>
          </div>
        </div>

      <!-- ****************************************************
      *  data hash for mobile devices , they use different images
      ********************************************************* -->
  <script>

          <%
              output = []
              secLength = @story.sections.length
              @story.sections.select{|t| t.ok? }.sort_by{|v| v.position}.each_with_index do |s,s_i|
                if s.media?
                  subLength = s.media.length
                  s.media.each_with_index do |t,t_i|

                    item = {}

                    item[:type] = "media"
                    item[:file] = "mobile_1024/#{t.image.asset_file_name_formatted}"
                    item[:section] = s_i+1
                    item[:slide] = t_i+1
                    item[:align] = "#{alignment.key(t.caption_align)}"
                    if secLength == t_i+1
                      item[:hideRule] = true
                    end

                    output<< item
                  end
                elsif s.slideshow?
                  subLength = s.slideshow.assets.length
                  s.slideshow.assets.each_with_index do |t,t_i|
                    item = {}

                    item[:type] = "slideshow"
                    item[:file] = "mobile_1024/#{t.asset_file_name_formatted}"
                    item[:section] = s_i+1
                    item[:slide] = t_i+1

                    if secLength == t_i+1
                        item[:hideRule] = true
                    end
                    output<< item
                  end
                end
              end
          %>

           var mobileImages = <%=output.to_json.html_safe %>;

      </script>

      <script>

        function mobileReorient() {

          var height = window.innerHeight - 40;

          if (height > (720*.59) && window.innerWidth < 768) height = (720*.59);

          var firstVideo = document.querySelector(".video-sequence");
          if(firstVideo.length)
          {
            firstVideo.querySelector(".video:first-of-type .video-container")[0].style.height = height + "px";
            firstVideo.querySelector(".video:first-of-type .video-caption--head")[0].style.height = height + "px";
          }

        }

        (function() {

          if (isMobile()) mobileReorient();

        })();


        defer(function() {

        /* Only do if we're on iPad, iPhone or Android -- TG */
        if (!isMobile()) return false;



        <% if !@export %>
            var _mobile_assets =  "/system/places/images/<%= @story.id %>/";
            var _slideshow_assets = "/system/places/slideshow/<%= @story.id %>/";
          <% else %>
            var _mobile_assets =  "media/images/";
            var _slideshow_assets = "media/slideshow/";
        <% end %>




        d3.select(window)
          .on("resize", mobileReorient)
          .on("scroll", function() {
              d3.select(".navigation")
                .classed("navigation-solid", window.scrollY > 350)
          });

    /*
      remove br from headlines
      add ios-loaded class to first video-sequence
      remove br from byline style
      we don't need this it's for map sequence

    */
      //  d3.select(".headline").html( d3.select(".headline").html().replace("<br>", " <br>") )

       d3.select(".video-sequence:first-of-type").classed("ios-loaded", true);

       //d3.select(".column .byline").html( d3.select(".column .byline").html().replace("<br>", " <br>") )

        //d3.select(".section:nth-child(7)").classed("map-sequence", true);


    /*
      scripts work with two devices phones and other devices like pads
      so it would 2 devices in the future phone and pad

      with small delay loop through hash

      if device is phone then replace values with phone inner values
    */
        setTimeout(function() {

          mobileImages.forEach(function(image) {

            /* if device is phone then replace values with phone inner values */
            if (isPhone() && image.phone) {
              for (var i in image.phone) {
                image[i] = image.phone[i];
              }
            }

        /* if device is phone then change path from 1024 to 640 */
            if (isPhone()) {
              if (image.file) image.file = image.file.replace("mobile_1024", "mobile_640");
            }

            /* on section missing stop here current loop */
            if (!image.section) return false;

        /* create path to image with fixed path and file name */
           if(image.type == "media")
          {
            image.url = _mobile_assets + image.file;
          }
          else if(image.type == "slideshow")
          {
            image.url = _slideshow_assets + image.file;
          }




            var container;
        /*  if slide number exicts
          find container
          if type not (map && hide) change html to img tag with url
          if type not (hide)
            if type map caption from file options without # (caption-)
            else caption- with first word of file options
          slide assign
        */
            if (image.slide) {
              if(image.type == "media")
              {
                container = d3.select(".article .section:nth-child(" + image.section + ") .video:nth-of-type(" + image.slide + ") .video-container")

                if (image.type != "map" && image.type != "hide") {


                  container.html("").append("img")
                    .attr("src", image.url);

                }

                if (image.type != "hide") {

                  var css;


                  if (image.type == "map") css = "caption-" + image.file.replace("#","");
                  else css = "caption-" + image.file.match(/\/([\w-]+)/)[1];

                    d3.select(".article .section:nth-child(" + image.section + ") .video:nth-of-type(" + image.slide + ") .video-caption")
                      .classed(css, true)

                }


                var slide = d3.select(".article .section:nth-child(" + image.section + ") .video:nth-of-type(" + image.slide + ")");
              }
              else if( image.type == "slideshow")
              {
                container = d3.select(".article .section:nth-child(" + image.section + ") .slideshow-wrapper");
                if(container.select(".slideshow-images").empty())
                {
                    var temp = container.append("div").attr("class","slideshow-container");
                    temp.append("div").attr("class", "slideshow-images");
                }
                var tempImages =  d3.select(".article .section:nth-child(" + image.section + ") .slideshow-wrapper .slideshow-container .slideshow-images");
                caption = container.select(".slideshow-captions .slideshow-caption:nth-of-type(" + image.slide + ")");
                tempImages.append("img").attr("src", image.url).attr("class","slideshow-image");
              }
            }


        /* aligning by options */
            if (image.align) d3.select(".article .section:nth-child(" + image.section + ") .video:nth-of-type(" + image.slide + ") .video-caption")
              .classed(image.align.split(" ").map(function(dir) {
                    return "align-" + dir
                  }).join(" "), true)


            if (!image.hideRule && slide) slide.append("div")
                .attr("class", "video-rule")


            /* if phone and map then replace tag */
            if (image.target == "map") {

              container = d3.select(".article .section:nth-child(" + image.section + ") .map")

              var source = d3.select(".map-source").html();

              if (isPhone()) container.html("<div class='map-source'>" + source + "</div>")

            }


        /* map-hide class it type hide */
            if (image.type == "hide") slide.classed("map-hide", true)

            if (image.type == "map") {

              container.html( container.html() + d3.select(image.file).text() )
            }


        /* add custom caption if specified */
            if (image.mobileCaption) {
              d3.select(".article .section:nth-child(" + image.section + ") .video:nth-of-type(" + image.slide + ") .video-caption").html(image.mobileCaption);
            }


            /* add src to image tag and if has diptych use it */
            if (image.type == "image") d3.select(".article .section:nth-child(" + image.section + ") .image:nth-child(" + image.slide + ") img")
                .attr("src", function(d) { return image.url; })

            if (image.type == "diptych") d3.select(".article .section:nth-child(" + image.section + ") .image:nth-child(" + image.slide + ") img:nth-child(" + image.image + ")")
                .attr("src", function(d) { return image.url; })

          })

          // added for donation pig
              var secTemp = d3.selectAll(".article .section");
              var temp = d3.select( secTemp[0][secTemp[0].length-1]).selectAll(".video-container");
              var lengthTemp = temp[0].length -1 ;
              if(lengthTemp >= 0)
              {
                  var last_section = d3.select(temp[0][lengthTemp]).append("div").attr("class","last-section");
                  last_section.append("div").attr("class","donate").append("a").attr('href','#').attr('id','modalDonate').attr("data-modalos-id","modalos-donate");
                  last_section.append("div").attr("class","pigy");
              }
          // donation end
        }, 200)


        });</script>

      <script>
     /* this scripts included when device is not mobile */
          defer(function() {

          /* Just skip if we're on iPad, iPhone or Android -- TG */
          if (isMobile()) return false;

            <% if !@export %>
               var _video_assets = "/system/places/video/<%= @story.id %>/processed/",
              _poster_assets = "/system/places/video/<%= @story.id %>/poster/",
              _image_assets = "/system/places/images/<%= @story.id %>/fullscreen/",
              _audio_assets = "/system/places/audio/<%= @story.id %>/";
            <% else %>
              var _video_assets = "media/video/processed/",
                  _poster_assets = "media/video/poster/",
                  _image_assets = "media/images/fullscreen/",
                  _audio_assets = "media/audio/";
            <% end %>

          var mute = false,
              muteVolume = "volume",
              fixRatio = 16 / 9,
              fixHeight = innerWidth / fixRatio,
              fixTop = Math.round((innerHeight - fixHeight) / 2),
              fadeTop = Math.max(200, fixTop),
              fadeBottom = Math.min(innerHeight - 200, fixTop + fixHeight),
              fade = d3.interpolateRgb("#fff", "#fff");

          //var headline = d3.select(".navigation-headline");
          var scrollprompt = d3.select('.scroll-prompt');
          var sequence = d3.selectAll(".video-sequence")
              .datum(function() {
                return {
                  first: !this.previousElementSibling,
                  audio: this.getAttribute("data-audio"),
                  length: this.querySelectorAll(".video").length
                };
              })
              .call(d3.behavior.watch()
                .on("scroll", sequencescrolled)
                .on("statechange", sequencestatechanged));

          sequence.filter(function(d) { return d.audio; }).append("audio")
              .attr("src", function(d) { return _audio_assets + d.audio + ".mp3"; })
              .property("loop", true);





          // Add for content to have audio track
          var section_content = d3.selectAll(".column")
              .datum(function() {
                return {
                  audio: this.getAttribute("data-audio")
                };
              }).call(d3.behavior.watch()
                .on("scroll", sequencescrolled)
                .on("statechange", sequencestatechanged));

          section_content.filter(function(d) { return d.audio; }).append("audio")
              .attr("src", function(d) { return _audio_assets + d.audio + ".mp3"; })
              .property("loop", true);
          // content audio end



          var section = d3.selectAll(".video")
              .datum(function() {
                var previous = this.previousElementSibling,
                    next = this.nextElementSibling;
                return {
                  video: this.getAttribute("data-video"),
                  animation: this.hasAttribute("data-animation"),
                  loop: this.hasAttribute("data-videoloop"),
                  first: !previous || !d3.select(previous).classed("video"),
                  last: !next || !d3.select(next).classed("video")
                };
              });

          var sectionFixed = sequence.selectAll(".video")
              .each(function(d) { d.sequence = this.parentNode.__data__; })
              .call(d3.behavior.watch()
                .on("scroll", fixscrolled)
                .on("statechange", fixstatechanged));

          var container = section.select(".video-container");

          var video = container.filter(function(d) { return d.video; }).append("video")
              .attr("preload", "none")
              .attr("poster", function(d) { return  _poster_assets + d.video + ".jpg"; })
              .property("loop", function(d) { return !d.animation; })
              .property("loop", function(d) { return d.loop; })
              .text("Your browser does not support this video.");

          video.append("source")
              .attr("src", function(d) { return _video_assets + d.video + ".mp4"; })
              .attr("type", "video/mp4");

          // video.append("source")
          //     .attr("src", function(d) { return _video_assets + d.video + ".webm"; })
          //     .attr("type", "video/webm");

          if (!supportsViewportUnits()) sectionFixed.append("div")
              .style("height", fixHeight + "px");

          var containerFixed = sectionFixed.select(".video-container")
              .style("z-index", function(d) { return d.first || d.last ? 1 : 2; })
              .style("position", function(d) { return d.first || d.last ? "absolute" : "fixed"; })
              .style("top", function(d) { return d.first || d.last ? null : fixTop + "px"; })
              .style("display", function(d) { return d.first || d.last ? null : "none"; });

          containerFixed.select(function(d, i) { return d.sequence.length > 1 ? this : null; }).append("div")
              .attr("class", "video-sequence-indicator")
              .style("margin-top", function(d) { return -d.sequence.length * 1.4 / 2 + "em"; })
              .text(function(d, i) { return d3.range(d.sequence.length).map(function(j) { return i === j ? "●" : "○"; }).join("\n"); });

          var muteButton = d3.select(".navigation-volume")
              .on("click", muted);

          d3.select(window)
              .on("load.video", loaded)
              .on("resize.video", resized);

          d3.select("video")
              .attr("preload", "auto");

          resized();

          // added for donation pig
              var secTemp = d3.selectAll(".article .section");
              var temp = d3.select( secTemp[0][secTemp[0].length-1]).selectAll(".video-container");
              var lengthTemp = temp[0].length -1 ;
              if(lengthTemp >= 0)
              {
                  var last_section = d3.select(temp[0][lengthTemp]).append("div").attr("class","last-section");
                  last_section.append("div").attr("class","donate").append("a").attr('href','#').attr('id','modalDonate').attr("data-modalos-id","modalos-donate");
                  last_section.append("div").attr("class","pigy");
              }
          // donation end

          function loaded() {
            video.attr("preload", function(d) { return d.first ? "auto" : "none"; });
          }

          function muted() {
            mute = !mute;
            muteVolume = mute ? "_volume" : "volume";
            muteButton.classed("navigation-volume--muted", mute);
            d3.event.preventDefault();
            d3.selectAll("audio,video").interrupt().property("volume", mute
                ? function() { this._volume = this.volume; return 0; }
                : function() { return this._volume; });
          }

          function resized() {
            fixHeight = innerWidth / fixRatio;
            fixTop = Math.round((innerHeight - fixHeight) / 2);
            fadeTop = Math.max(200, fixTop);
            fadeBottom = Math.min(innerHeight - 200, fixTop + fixHeight);
            d3.select(".video-sequence:first-child").style("margin-top", fixTop + "px");
            containerFixed.style("height", fixHeight + "px").filter(function(d) {
              var rect = this.parentNode.getBoundingClientRect();
              return d.first ? rect.top < fixTop
                  : d.last ? rect.bottom >= fixTop + fixHeight
                  : true;
            }).style("top", fixTop + "px");
          }

          function fixscrolled(d) {
            if (d.first || d.last) {
              //!(d.first && d.last) && () for bug when media section has only one media
              var fixed = !(d.first && d.last) && ((d.first && d3.event.rect.top < fixTop)
                  || (d.last && d3.event.rect.bottom >= fixTop + fixHeight));
              d3.select(this.querySelector(".video-container"))
                  .style("z-index", fixed ? 2 : 1)
                  .style("position", fixed ? "fixed" : "absolute")
                  .style("top", fixed ? fixTop + "px" : null);
            }

            var section = d3.select(this),
                container = section.select(".video-container"),
                videoNode = this.querySelector(".video-container video"),
                volume = 1;

            var opacityTop = d3.event.rect.top - fixHeight / 4,
                opacity = opacityTop > fixTop + fixHeight * 4 / 5 ? 0 // previous video fully opaque
                  : !d.last && opacityTop < fixTop - fixHeight ? 0 // next video fully covers this video
                  : opacityTop < fixTop ? 1 // this video is fully opaque, but may be covered by next video
                  : Math.max(0, Math.min(1, 1 - (opacityTop - fixTop) / (fixHeight / 5))); // this video is partially opaque

            if (d.first) {
              if (videoNode) {
                volume = d3.event.rect.top < fixTop + fadeTop ? Math.max(0, Math.min(1, 1 - (d3.event.rect.top - fixTop) / fadeTop)) : 0;
                var play = d3.event.rect.top <= fixTop + fadeTop;
                if (videoNode.paused) {
                  if (play && (!d.animation || (videoNode.currentTime < videoNode.duration && volume > .8))) {
                    videoNode.play();
                  }
                } else if (!play) {
                  videoNode.pause();
                }
              }
              container.style("opacity", opacityTop >= fixTop - fixHeight ? 1 : 0);
            } else {
              container.style("opacity", opacity);
              if (videoNode) {
                if (videoNode.paused) {
                  if (opacity) {
                   if (!d.animation || (videoNode.currentTime < videoNode.duration && opacity > .8)) {
                      videoNode.play();
                    }
                  } else if (videoNode.currentTime) {
                    videoNode.currentTime = 0;
                  }
                } else if (!opacity) {
                  videoNode.pause();
                  if (videoNode.currentTime) videoNode.currentTime = 0;
                }
              }
            }

            if (d.last) {
              if (videoNode) {
                volume = d3.event.rect.bottom < fadeBottom ? Math.max(0, Math.min(1, 1 - (fadeBottom - d3.event.rect.bottom) / fadeTop)) : 1;
                var play = d3.event.rect.bottom >= fadeBottom - fadeTop;
                if (videoNode.paused) {
                  if (play && (!d.animation || (videoNode.currentTime < videoNode.duration && volume > .8))) {
                    videoNode.play();
                  }
                } else if (!play) {
                  videoNode.pause();
                }
              }
            }

            section.select(".video-caption").style("opacity", opacityTop > fixTop ? Math.max(0, 1 - (opacityTop - fixTop) / (fixHeight / 5)) // fade in from bottom
                : opacityTop > fixTop - fixHeight * 9 / 20 ? 1 // this video is fully opaque and not covered
                :  Math.max(0, (opacityTop - fixTop + fixHeight * 9 / 20) / (fixHeight / 5) + 1)); // fade out to top

            if (videoNode) {
              videoNode[muteVolume] = volume = volume !== 1 ? volume // special-case volume for first and last fade
                  : opacityTop < fixTop - fixHeight ? 0 // video is fully covered by next video
                  : opacityTop < fixTop - fixHeight / 2 ? Math.max(0, Math.min(1, (opacityTop - fixTop + fixHeight) / (fixHeight / 2)))
                  : opacity;
              if (d.first && d.sequence.first) scrollprompt.style("opacity",  volume == 1 ? 1 : (volume-0.7) > 0 ? (volume-0.7) : 0 );
              //if (d.first && d.sequence.first) headline.style("opacity", 1 - volume);
            }
          }

          function fixstatechanged(d) {
            d3.select(this.querySelector(".video-container"))
                .style("display", d3.event.state ? null : "none")
              .select("video")
                .each(function() {
                  if (!d3.event.state) {
                    if (!this.paused) this.pause();
                    if (this.currentTime) this.currentTime = 0;
                  }
                });
                if (d.first && d.sequence.first && !d3.event.state) scrollprompt.style("opacity", 1);
            //if (d.first && d.sequence.first && !d3.event.state) headline.style("opacity", null);
          }

          function sequencescrolled() {
            var opacity = Math.max(0, Math.min(1, d3.event.rect.bottom < fadeBottom ? (fadeBottom - d3.event.rect.bottom) / fadeTop
                : d3.event.rect.top < fixTop + fadeTop ? (d3.event.rect.top - fixTop) / fadeTop
                : 1));

            // bug for column background change deny #if(){ data }
            if(!d3.select(this).classed("column"))
            {
              d3.select("body").style("background", fade(opacity));
            }
            d3.select(this).select("audio").property(muteVolume, 1 - opacity);
          }

          function sequencestatechanged() {
            var sequence = d3.select(this),
                audio = sequence.select("audio");
            if (d3.event.state) {
              sequence.selectAll("video").each(function() { this.preload = "auto";});
              audio.each(function() { this.play();  });
            } else {
              d3.select("body").style("background", null);
              audio.each(function() { this.pause(); });
            }
          }

          function supportsViewportUnits() {
            var element = d3.select("body").append("div").style("width", "50vw"),
                expected = innerWidth / 2,
                actual = parseFloat(element.style("width"));
            element.remove();
            return Math.abs(expected - actual) <= 1;
          }

          });</script>

    <script>
    defer(function() {

          if (isMobile()) return false;



          <% if !@export %>
              var assets = "/system/places/slideshow/<%= @story.id %>/slideshow/";
            <% else %>
              var assets = "media/slideshow/slideshow/";
            <% end %>

          /*" + (innerWidth * (window.devicePixelRatio || 1) * .7 > 900 ? "large" : "medium") + "*/



          d3.selectAll(".slideshow").each(function() {
            var currentIndex = 0,
                playInterval;

            var watch = d3.behavior.watch()
                .on("statechange.first", firststatechanged)
                .on("statechange", statechanged);

            var slideshow = d3.select(this).select(".slideshow-wrapper")
                .on("mouseover", stopPlay)
                .on("mouseout", stopPlay)
                .call(watch);

            var caption = slideshow.select(".slideshow-captions").selectAll(".slideshow-caption")
                .datum(function() {
                  return {
                    slug: this.getAttribute("data-slug")
                  };
                })
                .classed("slideshow-caption--active", function(d, i) { return i === currentIndex; });

            var images = caption.data();

            var container = slideshow.insert("div", ".slideshow-captions")
                .attr("class", "slideshow-container");

            var image = container.append("div")
                .attr("class", "slideshow-images")
              .selectAll(".slideshow-image")
                .data(images)
              .enter().append("img")
                .attr("class", "slideshow-image");

            image.filter(function(d, i) { return i === currentIndex; })
                .classed("slideshow-image--active", true)
                .attr("src", function(d) { return assets + d.slug; })
                .each(moveToFront);

            container.append("div")
                .attr("class", "slideshow-button slideshow-button--next")
                .on("click", function() { stopPlay(); showNext(); })
               .html("<svg class='slideshow-button-arrow' width='45' height='59' viewBox='-13 -21 45 59'><path d='M3,1.008L20.742,9.045L3,17.083L6,8.917Z'></path></svg>");

            container.append("div")
                .attr("class", "slideshow-button slideshow-button--previous")
                .on("click", function() { stopPlay(); showPrevious(); })
              .html("<svg class='slideshow-button-arrow' width='45' height='59' viewBox='-13 -21 45 59'><path d='M18.742,0.758L1,8.795L18.742,16.833L15.742,8.667Z'></path></svg>");

            var thumb = container.insert("div", ".slideshow-captions")
                .attr("class", "slideshow-thumbs")
              .selectAll(".slideshow-thumb")
                .data(images)
              .enter().append("img")
                .attr("class", function(d, i) { return "slideshow-thumb" + (i === currentIndex ? " slideshow-thumb--active" : ""); })
            <% if !@export %>
                .attr("src", function(d) { return "/system/places/slideshow/<%= @story.id %>/thumbnail/" + d.slug; })
            <% else %>
                .attr("src", function(d) { return "media/slideshow/thumbnail/" + d.slug; })
            <% end %>

                .on("click", function(d, i) { stopPlay(); show(i); });

            function firststatechanged() {
              if (d3.event.state) {
                image.attr("src", function(d, i) { return assets + d.slug; });
                watch.on("statechange.first", null);
              }
            }

            function statechanged() {
              if (d3.event.state) startPlay();
              else stopPlay();
            }

            function startPlay() {
              if (!playInterval) playInterval = setInterval(showNext, 7000);
            }

            function stopPlay() {
              if (playInterval) playInterval = clearInterval(playInterval);
            }

            function show(index) {
              var oldImage = d3.select(image[0][currentIndex]),
                  oldCaption = d3.select(caption[0][currentIndex]),
                  oldThumb = d3.select(thumb[0][currentIndex]),
                  newImage = d3.select(image[0][index]),
                  newCaption = d3.select(caption[0][index]),
                  newThumb = d3.select(thumb[0][index]);

              oldImage
                  .classed("slideshow-image--active", false);

              oldCaption
                  .classed("slideshow-caption--active", false);

              oldThumb
                  .classed("slideshow-thumb--active", false);

              newImage
                  .classed("slideshow-image--active", true)
                  .style("opacity", 0)
                  .each(moveToFront);

              newCaption
                  .classed("slideshow-caption--active", true);

              newThumb
                  .classed("slideshow-thumb--active", true);

              currentIndex = index;

              d3.timer(function() {
                newImage.style("opacity", null);
              }, 20);
            }

            function showNext() {
              show((currentIndex + 1) % images.length);
            }

            function showPrevious() {
              show((currentIndex ? currentIndex : images.length) - 1);
            }
          });

          function moveToFront() {
            this.parentNode.appendChild(this);
          }

          });</script>


    <!--[if gt IE 8]><!-->
      <!-- ****************************************************
      *  D3 library
      ********************************************************* -->
      <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.4.4/d3.min.js"></script>

    <script>

      (function() {

        var watched = [];

        d3.behavior.watch = function() {
          var event = d3.dispatch("statechange", "scroll");

          function watch(selection) {
            selection.each(function(i) {
              watched.push({
                element: this,
                state: 0,
                index: i,
                event: event
              });
            });
          }

          return d3.rebind(watch, event, "on");
        };

        if (/iPhone|iPad|iPad|Android/.test(navigator.userAgent) || location.hash == "#ipad") {
          d3.select(window)
              .on("resize.watch", watch_scrolledStatic)
              .on("DOMContentLoaded.watch", watch_scrolledStatic);
        } else {
          d3.select(window)
              .on("resize.watch", watch_scrolled)
              .on("scroll.watch", watch_scrolled)
              .on("DOMContentLoaded.watch", watch_scrolled);
        }

        function watch_scrolled() {
          watched.forEach(function(watch) {
            var rect = watch.element.getBoundingClientRect();
            if (rect.top + rect.height < 0 || rect.bottom - rect.height - innerHeight > 0) {
              watch_state(watch, 0);
            } else {
              var t = rect.top / (innerHeight - rect.height);
              watch_state(watch, t < 0 || t > 1 ? 1 : 2);
              watch_dispatch(watch, {type: "scroll", offset: t, rect: rect});
            }
          });
        }

        function watch_scrolledStatic() {
          watched.forEach(function(watch) {
            watch_state(watch, 1);
            watch_dispatch(watch, {type: "scroll", offset: .5, rect: {top: 0}}); // XXX rect
          });
        }

        function watch_state(watch, state1) {
          var state0 = watch.state;
          if (state0 !== state1) watch_dispatch(watch, {
            type: "statechange",
            state: watch.state = state1,
            previousState: state0
          });
        }

        function watch_dispatch(watch, event) {
          var element = watch.element,
              sourceEvent = event.sourceEvent = d3.event;
          try {
            d3.event = event;
            watch.event[event.type].call(element, element.__data__, watch.index);
          } finally {
            d3.event = sourceEvent;
          }
        }


        await();
    })();</script>

    <!--<![endif]-->
